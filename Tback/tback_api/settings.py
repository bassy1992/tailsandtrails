"""
Django settings for tback_api project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-hsm8&34rih(!&y@(o9fk%2ye5x%)vz+gli@6bduqq#2o#-8p*z')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver', '.railway.app', '.up.railway.app', 'tailsandtrails-production.up.railway.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'storages',  # For DigitalOcean Spaces
    'authentication',
    'destinations',
    'tickets',
    'payments',
    'gallery',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'payments.middleware.BookingDetailsMiddleware',
]

ROOT_URLCONF = 'tback_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tback_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# Database configuration - PostgreSQL with SQLite fallback
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Fallback to SQLite when DATABASE_URL is not available
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# DigitalOcean Spaces Configuration - Updated credentials
AWS_ACCESS_KEY_ID = os.getenv('SPACES_KEY')
AWS_SECRET_ACCESS_KEY = os.getenv('SPACES_SECRET')
AWS_STORAGE_BUCKET_NAME = 'tailsandtrailsmedia'
AWS_S3_REGION_NAME = 'sfo3'
AWS_S3_ENDPOINT_URL = 'https://sfo3.digitaloceanspaces.com'
AWS_DEFAULT_ACL = 'public-read'  # allows CDN access
AWS_QUERYSTRING_AUTH = False  # Don't add auth parameters to URLs
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

# Media storage configuration
# Always try to use DigitalOcean Spaces if credentials are available
if AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY:
    # DigitalOcean Spaces configuration
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = 'https://tailsandtrailsmedia.sfo3.cdn.digitaloceanspaces.com/'
    
    # Additional S3 settings
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_CUSTOM_DOMAIN = 'tailsandtrailsmedia.sfo3.cdn.digitaloceanspaces.com'
    AWS_LOCATION = ''
    
    # Debug: Print storage configuration (remove in production)
    print(f"üîß Using DigitalOcean Spaces storage")
    print(f"   Bucket: {AWS_STORAGE_BUCKET_NAME}")
    print(f"   Region: {AWS_S3_REGION_NAME}")
    print(f"   Endpoint: {AWS_S3_ENDPOINT_URL}")
else:
    # Fallback to local storage
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'
    print(f"‚ö†Ô∏è  Using local file storage (no Spaces credentials)")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# CORS settings for frontend integration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",  # Frontend dev server
    "http://127.0.0.1:8080",
    "http://localhost:5173",  # Vite dev server default (backup)
    "http://127.0.0.1:5173",
    "https://tfront-rktr1dcet-bassys-projects-fca17413.vercel.app",  # Vercel frontend (old)
    "https://tfront-nxcxxw7cr-bassys-projects-fca17413.vercel.app",  # Vercel frontend (previous)
    "https://tfront-b30j1teg7-bassys-projects-fca17413.vercel.app",  # Vercel frontend (current)
    "https://tailsandtrails.vercel.app",  # Vercel frontend (main)
    "https://tailsandtrails-production.up.railway.app",  # Railway production backend
]

CORS_ALLOW_CREDENTIALS = True

# Additional CORS settings for development
CORS_ALLOW_ALL_ORIGINS = True  # Only for development - allows all origins
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'x-forwarded-for',
    'x-forwarded-proto',
]

# Additional settings to prevent OpaqueResponseBlocking
CORS_PREFLIGHT_MAX_AGE = 86400
CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-csrftoken',
    'authorization',
]

# Ensure CSRF is disabled for API endpoints
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "https://tfront-rktr1dcet-bassys-projects-fca17413.vercel.app",
    "https://tfront-nxcxxw7cr-bassys-projects-fca17413.vercel.app",
    "https://tfront-b30j1teg7-bassys-projects-fca17413.vercel.app",
    "https://tailsandtrails.vercel.app",
    "https://tailsandtrails-production.up.railway.app",
]

# Custom user model
AUTH_USER_MODEL = 'authentication.User'

# Payment settings
PAYMENT_TIMEOUT = 30  # seconds
BASE_URL = os.getenv('BASE_URL', 'http://localhost:8000')
SITE_NAME = os.getenv('SITE_NAME', 'Trails & Trails')

# Stripe settings removed - using MTN MoMo only

# Paystack settings
PAYSTACK_PUBLIC_KEY = os.getenv('PAYSTACK_PUBLIC_KEY', '')
PAYSTACK_SECRET_KEY = os.getenv('PAYSTACK_SECRET_KEY', '')
PAYSTACK_WEBHOOK_URL = os.getenv('PAYSTACK_WEBHOOK_URL', 'http://localhost:8000/api/payments/paystack/webhook/')

# MTN Mobile Money settings (keeping for backward compatibility)
MTN_MOMO_ENVIRONMENT = os.getenv('MTN_MOMO_ENVIRONMENT', 'sandbox')
MTN_MOMO_BASE_URL = os.getenv('MTN_MOMO_BASE_URL', 'https://sandbox.momodeveloper.mtn.com')
MTN_MOMO_COLLECTION_USER_ID = os.getenv('MTN_MOMO_COLLECTION_USER_ID', '')
MTN_MOMO_COLLECTION_API_KEY = os.getenv('MTN_MOMO_COLLECTION_API_KEY', '')
MTN_MOMO_COLLECTION_SUBSCRIPTION_KEY = os.getenv('MTN_MOMO_COLLECTION_SUBSCRIPTION_KEY', '')
MTN_MOMO_CALLBACK_URL = os.getenv('MTN_MOMO_CALLBACK_URL', 'http://localhost:8000/api/payments/mtn-momo/webhook/')

# Email settings (configure for production)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
DEFAULT_FROM_EMAIL = 'noreply@trailsandtrails.com'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'payments.log',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'payments': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
